//redux farklı teknolojilerle çalışır. Durum güncelleme çerçevesidir.
// büyük projelerde state değerlerini güncellemek için kullanılır.
//https://www.freecodecamp.org/learn/front-end-development-libraries/redux/write-a-counter-with-redux -> tekrar et
//redux store uygulamadaki state değerini tutar.
store.getState() // bir state değeri çağırır.
let currentState = store.getState();
/*Redux bir durum yönetimi çerçevesi olduğundan, durumu güncellemek temel görevlerinden biridir. 
Redux'ta, tüm durum güncellemeleri, eylemlerin gönderilmesiyle tetiklenir. 
Bir eylem, meydana gelen bir eylem olayı hakkında bilgi içeren bir JavaScript nesnesidir. 
Redux deposu bu eylem nesnelerini alır ve ardından durumunu buna göre günceller. 
Bazen bir Redux eylemi de bazı veriler taşır. Örneğin, eylem, bir kullanıcı oturum açtıktan sonra bir kullanıcı adı taşır. 
Veriler isteğe bağlı olsa da, eylemler, gerçekleşen eylemin 'türünü' belirten bir tür özelliği taşımalıdır. 

*/
let action={type:"LOGIN"}; // basit bir aksiyon tanımı ACTİON = JS OBJECT
function actionCreator(){/* böylece redux bir olayı alıp gerekli yerleri günceller */
  return action;
}
// dispatch / 
store.dispatch() // bir olayı reduxa gönderir.
store.dispatch(loginAction());
store.dispatch({type: "LOGIN"});

//Handle an Action in the Store
//reducer -> olaya verilecek cevabı belirler.
// önce action alınır reduxa gönderilir ve reducer ile gelecek cevap belirlenir. reducer saf fonksiyondur.
// reducer, state ve actions değerlerini argüman olarak alır ve yeni bir state olarak verir.
const ADD = 'ADD';
const reducer = (state = 0, action) => {
  switch(action.type) {
    case ADD:
      return state + 1;
    default:
      return state;
  }
};
const store = Redux.createStore(reducer);
// Global count variable:
let count = 0;
// Change code below this line
const addOne = () =>{count +=1};
store.subscribe(addOne);
// Change code above this line
store.dispatch({type: ADD});
console.log(count);
store.dispatch({type: ADD});
console.log(count);
store.dispatch({type: ADD});
console.log(count);

//## Redux Thunk asycn. middleware / asenkron ara yazılım
/* bunu reduxa dahil etmek için createStore() içine ikinci argüman olarak
Redux.applyMiddleware(), eklenir.*/
const store = Redux.createStore(
  asyncDataReducer,
  Redux.applyMiddleware(ReduxThunk.default)
);


//React - Redux
/*React, verileri sağladığınız bir görünüm kitaplığıdır, ardından görünümü verimli, öngörülebilir bir şekilde işler. 
Redux, uygulamanızın durumunun yönetimini basitleştirmek için kullanabileceğiniz bir durum yönetimi çerçevesidir. 
Tipik olarak, bir React Redux uygulamasında, tüm uygulamanızın durumunu yöneten tek bir Redux mağazası oluşturursunuz. 
React bileşenleriniz, yalnızca mağazadaki rolleriyle alakalı veri parçalarına abone olur. Ardından, eylemleri doğrudan 
React bileşenlerinden gönderirsiniz ve bu da mağaza güncellemelerini tetikler.

React bileşenleri kendi durumlarını yerel olarak yönetebilse de, karmaşık bir uygulamanız olduğunda, 
Redux ile uygulama durumunu tek bir konumda tutmak genellikle daha iyidir. 
Tek tek bileşenlerin yalnızca kendilerine özgü yerel duruma sahip olabileceği istisnalar vardır. Son olarak, 
Redux kutudan çıktığı haliyle React ile çalışmak üzere tasarlanmadığından, tepki-redux paketini kullanmanız gerekir. 
Redux durumunu geçmeniz ve React bileşenlerinize sahne olarak göndermeniz için bir yol sağlar. */


