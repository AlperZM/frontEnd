// tr.reactjs.org adresinden notlar. / line 72 Stat yukarı taşıma
// first https://tr.reactjs.org/docs/hello-world.html -> 11. bileşim vs kalıtım
// second https://tr.reactjs.org/tutorial/tutorial.html
// JSX = Statement (JS Sözdizimi)
// ->JSX => const element = <h1>Hello, world!</h1>; 
// React sperates HTML and JS.
// {/*any javaScript statement here */}
const name = 'Josh Perez';const element = <h1>Hello, {name}</h1>;
ReactDOM.render(
  element,
  document.getElementById('root')
);

//<div id="root></div> => root of the react. can use multi roots...
const element = <h1>Hello, world</h1>;
ReactDOM.render(element, document.getElementById('root'));
// ReactDOM.render(para1, para2); ile root düğümüne geçiş yapılır.

// 
class extends React.Component{
constructor(props){
super(props); // must be used
//any code
}


// mounting => değişkenin takılması
// unmounting => değişkenin çıkarılması
//lifecycle methods => yaşam döngüsü metodları
componentDidMount() {/* starts lifecycle - yaşam döngüsü*/
    this.timerID/* Timer ID - zamanlayıcı ID*/ = setInterval(      () => this.tick(),      1000    );  }

// state => stores anything in class. set state value in constructor. / state => class içindeki herhangi bir değer. constructorda tanımlanır.
// state temel bileşendir. deişmez. Değiştirmek için setState kullanılır.
 // Callback içerisinde `this` erişiminin çalışabilmesi için, `bind(this)` gereklidir    this.handleClick = this.handleClick.bind(this);
 
 //<button onClick={(e) => this.deleteRow(id, e)}>Delete Row</button>
//<button onClick={this.deleteRow.bind(this, id)}>Delete Row</button>

//key => helps react to changed nodes. // her <li> elementinde olması gerek. Benzersiz isim kullan
// KEY ~ this
//<li key = {e.toString()}> listItem </li>

// kontrollü bileşen / forms
class FormName extends React.Component{
constructor(props){
super(props);
this.state = {value: ""};
this.handleChange = this.handleChange.bind(this);
this.handleSubmit = this.handleSubmit.bind(this);
}
handleChange(e){this.setState({value: e.target.value});}
handleSubmit(e){alert("Deneme "+ (this.state.value).toUpperCase());
e.preventDefault();}

render(){
return(
<form onSubmit = {this.handleSubmit}>
  <label>
    İsim: 
    <input type = "text" placeholder="placeholder" value = {this.state.value} onChange = {this.handleChange} />  
  </label>
 <input type = "submit" onSubmit = {this.handleSubmit} value = "Değer" />
</form>
);
}}
ReactDOM.render(
<FormName />, document.getElementById("root")
);


// State yukarı taşıma - dönüştürme fonksiyonları
const scaleNames = {
  c: 'Celsius',
  f: 'Fahrenheit'
};

function toCelsius(fahrenheit) {
  return (fahrenheit - 32) * 5 / 9;
}

function toFahrenheit(celsius) {
  return (celsius * 9 / 5) + 32;
}

function tryConvert(temperature, convert) {
  const input = parseFloat(temperature);
  if (Number.isNaN(input)) {
    return '';
  }
  const output = convert(input);
  const rounded = Math.round(output * 1000) / 1000;
  return rounded.toString();
}

function BoilingVerdict(props) {
  if (props.celsius >= 100) {
    return <p>The water would boil.</p>;
  }
  return <p>The water would not boil.</p>;
}

class TemperatureInput extends React.Component {
  constructor(props) {
    super(props);
    this.handleChange = this.handleChange.bind(this);
  }

  handleChange(e) {
    this.props.onTemperatureChange(e.target.value);
  }

  render() {
    const temperature = this.props.temperature;
    const scale = this.props.scale;
    return (
      <fieldset>
        <legend>Enter temperature in {scaleNames[scale]}:</legend>
        <input value={temperature}
               onChange={this.handleChange} />
      </fieldset>
    );
  }
}

class Calculator extends React.Component {
  constructor(props) {
    super(props);
    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);
    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);
    this.state = {temperature: '', scale: 'c'};
  }

  handleCelsiusChange(temperature) {
    this.setState({scale: 'c', temperature});
  }

  handleFahrenheitChange(temperature) {
    this.setState({scale: 'f', temperature});
  }

  render() {
    const scale = this.state.scale;
    const temperature = this.state.temperature;
    const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;
    const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;

    return (
      <div>
        <TemperatureInput
          scale="c"
          temperature={celsius}
          onTemperatureChange={this.handleCelsiusChange} />
        <TemperatureInput
          scale="f"
          temperature={fahrenheit}
          onTemperatureChange={this.handleFahrenheitChange} />
        <BoilingVerdict
          celsius={parseFloat(celsius)} />
      </div>
    );
  }
}

ReactDOM.render(
  <Calculator />,
  document.getElementById('root')
);


// Deneme
//dış kabuk
function Borders(props){
return(
<section className={"Border BorderColor-" + props.color}>{props.children}</section>);
}
// iç kabuk
function Dialog(props){
return(
<Borders color="red">
  <h1 className="Dialog-title">{props.title}</h1>
  <p className="Dialog-message">{props.message}</p>
  {props.children}
</Borders>);
}

class SingUp extends React.Component{
constructor(props){
super(props);
this.handleChange= this.handleChange.bind(this);
this.handleSubmit= this.handleSubmit.bind(this);
this.state = {login: ""};}
render(){
return(
<Dialog title="Merhaba" message="Yolculuğunuza Hoş geldiniz!"> <input value= {this.state.login} onChange= {this.handleChange} /> <button type="submit" onClick={this.handleSubmit} >Gönder</button> 
</Dialog>);
}

handleChange(e){this.setState({login: e.target.value});}
handleSubmit(){
alert("Hoş Geldnizi: "+this.state.login);
}

}

ReactDOM.render(
<SingUp />, document.getElementById("root")
);

//Reactte düşünmek / thinking in react
// Uygulama hiyerarşisi oluştur.
// static=> çok yaz - az düşün|| dinamik => az yaz - çok düşün
// basit projeler => yukarıdan aşağıya;
// karmaşık projeler => aşağıdan yukarıya doğru kodlanır. böylece daha kolay test edilebilir.



