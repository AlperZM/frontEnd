// tr.reactjs.org adresinden notlar. / line 72 Stat yukarı taşıma
// first https://tr.reactjs.org/docs/hello-world.html -> 10. State'i Yukarı Taşıma
// second https://tr.reactjs.org/tutorial/tutorial.html
// JSX = Statement (JS Sözdizimi)
// ->JSX => const element = <h1>Hello, world!</h1>; 
// React sperates HTML and JS.
// {/*any javaScript statement here */}
const name = 'Josh Perez';const element = <h1>Hello, {name}</h1>;
ReactDOM.render(
  element,
  document.getElementById('root')
);

//<div id="root></div> => root of the react. can use multi roots...
const element = <h1>Hello, world</h1>;
ReactDOM.render(element, document.getElementById('root'));
// ReactDOM.render(para1, para2); ile root düğümüne geçiş yapılır.

// 
class extends React.Component{
constructor(props){
super(props); // must be used
//any code
}


// mounting => değişkenin takılması
// unmounting => değişkenin çıkarılması
//lifecycle methods => yaşam döngüsü metodları
componentDidMount() {/* starts lifecycle - yaşam döngüsü*/
    this.timerID/* Timer ID - zamanlayıcı ID*/ = setInterval(      () => this.tick(),      1000    );  }

// state => stores anything in class. set state value in constructor. / state => class içindeki herhangi bir değer. constructorda tanımlanır.

 // Callback içerisinde `this` erişiminin çalışabilmesi için, `bind(this)` gereklidir    this.handleClick = this.handleClick.bind(this);
 
 //<button onClick={(e) => this.deleteRow(id, e)}>Delete Row</button>
//<button onClick={this.deleteRow.bind(this, id)}>Delete Row</button>

//key => helps react to changed nodes. 
// KEY ~ this
//<li key = {e.toString()}> listItem </li>

// kontrollü bileşen / forms
class FormName extends React.Component{
constructor(props){
super(props);
this.state = {value: ""};
this.handleChange = this.handleChange.bind(this);
this.handleSubmit = this.handleSubmit.bind(this);
}
handleChange(e){this.setState({value: e.target.value});}
handleSubmit(e){alert("Deneme "+ (this.state.value).toUpperCase());
e.preventDefault();}

render(){
return(
<form onSubmit = {this.handleSubmit}>
  <label>
    İsim: 
    <input type = "text" placeholder="placeholder" value = {this.state.value} onChange = {this.handleChange} />  
  </label>
 <input type = "submit" onSubmit = {this.handleSubmit} value = "Değer" />
</form>
);
}}
ReactDOM.render(
<FormName />, document.getElementById("root")
);


// State yukarı taşıma - dönüştürme fonksiyonları
<TemperatureInput scale="f" />
