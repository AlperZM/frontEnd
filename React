/* ### React Hooks - w3Schools ###*/


// install react ile kullanılır
import React from "react";
import ReactDOM from "react-dom";
// Bu dosyaları ekle
<script src="https://unpkg.com/react@17/umd/react.development.js" crossorigin></script>
<script src="https://unpkg.com/react-dom@17/umd/react-dom.development.js" crossorigin></script>
<script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
// NPX ve nodejs yüle ve şu komutu çalıştırarak ract kur
create-react-app
npx create-react-app my-react-app /* my-react-app isteğe bağlı isim */
// https://www.w3schools.com/react/react_class.asp ### Tekrar et
//w3schools notları
//class es6 özelliği
// return metodundan hemen önce normal JS codu yazılabilir. Render içinde jsx kullanılır.
class Model extends Car { /* extends=> üst class özelliklerini aynen kullanır(inheritance).*/
  constructor(name, mod) { /* class özellikleri(properities) ve metodları constructor içine yazılır. */
    super(name); /* üst class(parent class) özellik ve metodlarını kullanır. */
    this.model = mod;
  }  
  show() {
      return this.present() + ', it is a ' + this.model
  }
}
class Example extends React.Component{ /*Example class oluşturuldu ve ReactComponent(yerleşik react class) özellik ve metodları koyalandı */
constructor(props){ /* temel react özellikleri için props kullanıldı */
super(props); // must be used
//any code
}

// arrow functions () => any code; /* normal fonksyonun kısaltılmıış hali*/
// destructing => gerekli olanı almak:
const vehicles = ['mustang', 'f-150', 'expedition'];
const [car, truck, suv] = vehicles; /* aynı sıralmada olanı alır. */
const vehicles = ['mustang', 'f-150', 'expedition'];
const [car,, suv] = vehicles; /* arada atlanmak istenen öğeler için boş bırakılır. */

const vehicleOne = {
  brand: 'Ford',
  model: 'Mustang',
  type: 'car',
  year: 2021, 
  color: 'red'
}

myVehicle(vehicleOne);

function myVehicle({type, color, brand, model}) {
  const message = 'My ' + type + ' is a ' + color + ' ' + brand + ' ' + model + '.';
}

// render
ReactDOM.render(<p>Hello</p>, document.getElementById('root'));
/* ilk kısım html elementi, ikinci kısım onun nereye iletileceğini gösterir.*/


// jsx = javaScriptXml -> JS içine HTML kodları yazmaya yarar.
const myelement = ( /* çoklu html elementlerini paranteze içine al */
  <ul>
    <li>Apples</li>
    <li>Bananas</li>
    <li>Cherries</li>
  </ul>
);
const myelement = (/* çoklu elementleri tek bir üst element içerisine al */
  <div>
    <p>I am a paragraph.</p>
    <p>I am a paragraph too.</p>
  </div>
);

const x = 5; /* JSX içerisinde "if" sadece ternary olarak kullanılır. ya da if için jsx dışında kod yazılmalı */
const myelement = <h1>{(x) < 10 ? "Hello" : "Goodbye"}</h1>;
/* props =~ fonksiyon argümanları
state =~ durumlar.


*/
class Car extends React.Component {
  constructor(props) {
    super(props); /* props burda deklare edilir. */
  }
  render() {/* ReactDOM.render() ile bu props için değer atanır */
    return <h2>I am a {this.props.model}!</h2>; /* model burda ilk görülür. daha sonraki değerler için yer tutar.*/
  }
}

ReactDOM.render(<Car model="Mustang"/>, document.getElementById('root')); /* props için burda değer verilir. ilk görülen props için değer burada verilir.*/
// components iler birbirine referans verebilir, iç içe geçebilir.
class Car extends React.Component {
  render() {
    return <h2>I am a Car!</h2>;
  }
}

class Garage extends React.Component {
  render() {
    return (
      <div>
      <h1>Who lives in my Garage?</h1>
      <Car />
      </div>
    );
  }
}

ReactDOM.render(<Garage />, document.getElementById('root'));
//state => JS Object, changing the state; inlili bileşenin component kısmında atama yapılır.
this.setState() // state değeri değiştirir.
/* ### mounting ### */
/* Mounting means putting elements into the DOM. Bir bileşenğin çıkarılması sonucu saklamak istenilen değerleri kontrol eder.
HTML DOM içerisine yeni elementler ekler
React has four built-in methods that gets called, in this order, when mounting a component:
4 farklı yerleşik metot var */
    constructor()
    getDerivedStateFromProps()
    render()
    componentDidMount()
/* render gerekli ve kullanılması zorunlu, diğerleri opsiyonel
The render() method is required and will always be called, the others are optional and will be called if you define them. */
/*
The constructor() method is called before anything else, // Class ile çalışırken constructor en başta kulanılmalı.
when the component is initiated, 
and it is the natural place to set up the initial state and other initial values.

The constructor() method is called with the props, as arguments, 
and you should always start by calling the super(props) before anything else, // constructor ve hemen altında super(props); kullanılmalı.
this will initiate the parent's constructor method and allows the component to inherit methods from its parent (React.Component).
*/
/*
getDerivedStateFromProps
Bu güncelleme yaptıktan sonra buton gibi değişiklikler yok sayılır. Bu React kodlarını da günceller.
The getDerivedStateFromProps() method is called right before rendering the element(s) in the DOM.
This is the natural place to set the state object based on the initial props.
It takes state as an argument, and returns an object with changes to the state.
The example below starts with the favorite color being "red", 
but the getDerivedStateFromProps() method updates the favorite color based on the favcol attribute:*/
class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {favoritecolor: "red"};
  }
  static getDerivedStateFromProps(props, state) {
    return {favoritecolor: props.favcol };
  }
  render() {
    return (
      <h1>My Favorite Color is {this.state.favoritecolor}</h1>
    );
  }
}

/* componentDidMount 
The componentDidMount() method is called after the component is rendered.
This is where you run statements that requires that the component is already placed in the DOM.*/
class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {favoritecolor: "red"};
  }
  componentDidMount() {
    setTimeout(() => {
      this.setState({favoritecolor: "yellow"})
    }, 1000)
  }
  render() {
    return (
      <h1>My Favorite Color is {this.state.favoritecolor}</h1>
    );
  }
}

ReactDOM.render(<Header />, document.getElementById('root'));

/* updating
*/
shouldComponentUpdate() // değişiklik yapılıp yapılmayacağını denetler. false değeri değişikliklere izin vermez.
class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {favoritecolor: "red"};
  }
  shouldComponentUpdate() {
    return false;
  }
  changeColor = () => {
    this.setState({favoritecolor: "blue"});
  }
  render() {
    return (
      <div>
      <h1>My Favorite Color is {this.state.favoritecolor}</h1>
      <button type="button" onClick={this.changeColor}>Change color</button>
      </div>
    );
  }
}
getSnapshotBeforeUpdate() // değişiklik geçmişini alır.
/* In the getSnapshotBeforeUpdate() method you have access to the props and state before the update, 
meaning that even after the update, you can check what the values were before the update.
güncellemeden önce props ve state değerlerini alır. böylece hangi değişikliklerin yapıldığı kontrol edilebilir.
getSnapshotBeforeUpdate(), componentDidUpdate() ile birlikte kullanılır.
If the getSnapshotBeforeUpdate() method is present, 
you should also include the componentDidUpdate() method, otherwise you will get an error.
class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {favoritecolor: "red"};
  }
  componentDidMount() {
    setTimeout(() => {
      this.setState({favoritecolor: "yellow"})
    }, 1000)
  }
  getSnapshotBeforeUpdate(prevProps, prevState) {
    document.getElementById("div1").innerHTML =
    "Before the update, the favorite was " + prevState.favoritecolor;
  }
  componentDidUpdate() {
    document.getElementById("div2").innerHTML =
    "The updated favorite is " + this.state.favoritecolor;
  }
  render() {
    return (
      <div>
        <h1>My Favorite Color is {this.state.favoritecolor}</h1>
        <div id="div1"></div>
        <div id="div2"></div>
      </div>
    );
  }
}

function Football() {
  const shoot = (a, b) => {
    alert(b.type);
		/*
		'b' represents the React event that triggered the function.
    In this case, the 'click' event
		*/
  }

  return (
    <button onClick={(event) => shoot("Goal!", event)}>Take the shot!</button>
  );
}

// Ternary operator tekrar et

/*Create React App doesn't include page routing.=> Yönlendirme
React Router is the most popular solution.
*/
npm i -D react-router-dom // router kurmak için...
/* React Memo: optimum performance
*/




// tr.reactjs.org adresinden notlar. / line 72 Stat yukarı taşıma
// first https://tr.reactjs.org/docs/hello-world.html -> 11. bileşim vs kalıtım
// second https://tr.reactjs.org/tutorial/tutorial.html
// JSX = Statement (JS Sözdizimi)
// ->JSX => const element = <h1>Hello, world!</h1>; 
// React sperates HTML and JS.
// {/*any javaScript statement here */}
const name = 'Josh Perez';const element = <h1>Hello, {name}</h1>;
ReactDOM.render(
  element,
  document.getElementById('root')
);

//<div id="root></div> => root of the react. can use multi roots...
const element = <h1>Hello, world</h1>;
ReactDOM.render(element, document.getElementById('root'));
// ReactDOM.render(para1, para2); ile root düğümüne geçiş yapılır.

// 
class extends React.Component{
constructor(props){
super(props); // must be used
//any code
}


// mounting => değişkenin takılması
// unmounting => değişkenin çıkarılması
//lifecycle methods => yaşam döngüsü metodları
componentDidMount() {/* starts lifecycle - yaşam döngüsü*/
    this.timerID/* Timer ID - zamanlayıcı ID*/ = setInterval(      () => this.tick(),      1000    );  }

// state => stores anything in class. set state value in constructor. / state => class içindeki herhangi bir değer. constructorda tanımlanır.
// state temel bileşendir. deişmez. Değiştirmek için setState kullanılır.
 // Callback içerisinde `this` erişiminin çalışabilmesi için, `bind(this)` gereklidir    this.handleClick = this.handleClick.bind(this);
 
 //<button onClick={(e) => this.deleteRow(id, e)}>Delete Row</button>
//<button onClick={this.deleteRow.bind(this, id)}>Delete Row</button>

//key => helps react to changed nodes. // her <li> elementinde olması gerek. Benzersiz isim kullan
// KEY ~ this
//<li key = {e.toString()}> listItem </li>

// kontrollü bileşen / forms
class FormName extends React.Component{
constructor(props){
super(props);
this.state = {value: ""};
this.handleChange = this.handleChange.bind(this);
this.handleSubmit = this.handleSubmit.bind(this);
}
handleChange(e){this.setState({value: e.target.value});}
handleSubmit(e){alert("Deneme "+ (this.state.value).toUpperCase());
e.preventDefault();}

render(){
return(
<form onSubmit = {this.handleSubmit}>
  <label>
    İsim: 
    <input type = "text" placeholder="placeholder" value = {this.state.value} onChange = {this.handleChange} />  
  </label>
 <input type = "submit" onSubmit = {this.handleSubmit} value = "Değer" />
</form>
);
}}
ReactDOM.render(
<FormName />, document.getElementById("root")
);
// state as a props
// uygulamada dikey ya da yaytay bilgi akışı için state - props olarak kullanılır.
//Tanımlarken this.state.... ile tanımlanıp render edilir.

// State yukarı taşıma - dönüştürme fonksiyonları
const scaleNames = {
  c: 'Celsius',
  f: 'Fahrenheit'
};

function toCelsius(fahrenheit) {
  return (fahrenheit - 32) * 5 / 9;
}

function toFahrenheit(celsius) {
  return (celsius * 9 / 5) + 32;
}

function tryConvert(temperature, convert) {
  const input = parseFloat(temperature);
  if (Number.isNaN(input)) {
    return '';
  }
  const output = convert(input);
  const rounded = Math.round(output * 1000) / 1000;
  return rounded.toString();
}

function BoilingVerdict(props) {
  if (props.celsius >= 100) {
    return <p>The water would boil.</p>;
  }
  return <p>The water would not boil.</p>;
}

class TemperatureInput extends React.Component {
  constructor(props) {
    super(props);
    this.handleChange = this.handleChange.bind(this);
  }

  handleChange(e) {
    this.props.onTemperatureChange(e.target.value);
  }

  render() {
    const temperature = this.props.temperature;
    const scale = this.props.scale;
    return (
      <fieldset>
        <legend>Enter temperature in {scaleNames[scale]}:</legend>
        <input value={temperature}
               onChange={this.handleChange} />
      </fieldset>
    );
  }
}

class Calculator extends React.Component {
  constructor(props) {
    super(props);
    this.handleCelsiusChange = this.handleCelsiusChange.bind(this);
    this.handleFahrenheitChange = this.handleFahrenheitChange.bind(this);
    this.state = {temperature: '', scale: 'c'};
  }

  handleCelsiusChange(temperature) {
    this.setState({scale: 'c', temperature});
  }

  handleFahrenheitChange(temperature) {
    this.setState({scale: 'f', temperature});
  }

  render() {
    const scale = this.state.scale;
    const temperature = this.state.temperature;
    const celsius = scale === 'f' ? tryConvert(temperature, toCelsius) : temperature;
    const fahrenheit = scale === 'c' ? tryConvert(temperature, toFahrenheit) : temperature;

    return (
      <div>
        <TemperatureInput
          scale="c"
          temperature={celsius}
          onTemperatureChange={this.handleCelsiusChange} />
        <TemperatureInput
          scale="f"
          temperature={fahrenheit}
          onTemperatureChange={this.handleFahrenheitChange} />
        <BoilingVerdict
          celsius={parseFloat(celsius)} />
      </div>
    );
  }
}

ReactDOM.render(
  <Calculator />,
  document.getElementById('root')
);


// Deneme
//dış kabuk
function Borders(props){
return(
<section className={"Border BorderColor-" + props.color}>{props.children}</section>);
}
// iç kabuk
function Dialog(props){
return(
<Borders color="red">
  <h1 className="Dialog-title">{props.title}</h1>
  <p className="Dialog-message">{props.message}</p>
  {props.children}
</Borders>);
}

class SingUp extends React.Component{
constructor(props){
super(props);
this.handleChange= this.handleChange.bind(this);
this.handleSubmit= this.handleSubmit.bind(this);
this.state = {login: ""};}
render(){
return(
<Dialog title="Merhaba" message="Yolculuğunuza Hoş geldiniz!"> <input value= {this.state.login} onChange= {this.handleChange} /> <button type="submit" onClick={this.handleSubmit} >Gönder</button> 
</Dialog>);
}

handleChange(e){this.setState({login: e.target.value});}
handleSubmit(){
alert("Hoş Geldnizi: "+this.state.login);
}

}

ReactDOM.render(
<SingUp />, document.getElementById("root")
);

//Reactte düşünmek / thinking in react
// Uygulama hiyerarşisi oluştur.
// static=> çok yaz - az düşün|| dinamik => az yaz - çok düşün
// basit projeler => yukarıdan aşağıya;
// karmaşık projeler => aşağıdan yukarıya doğru kodlanır. böylece daha kolay test edilebilir.

class Toggle extends React.Component{
constructor(props){
super(props);
this.state = {ToggleState: true};
this.handleClick=this.handleClick.bind(this);}
handleClick(e){
e.preventDefault();
this.setState(befState=>({
ToggleState: !befState.ToggleState
}));
}
render(){
return(
<button onClick={this.handleClick}>{this.state.ToggleState ? "Evet": "Hayır"}</button>
)};
}
ReactDOM.render(
<Toggle />, document.getElementById("root")
);

